/*
* Copyright (c) 2017 Pedro Falcato
* This file is part of Onyx, and is released under the terms of the MIT License
* check LICENSE at the root directory for more information
*/

#ifndef _VMX_H
#define _VMX_H

#include <onyx/registers.h>

#define VMCS_GUEST_ES		0x800UL
#define VMCS_GUEST_CS		0x802UL
#define VMCS_GUEST_SS		0x804UL
#define VMCS_GUEST_DS		0x806UL
#define VMCS_GUEST_FS		0x808UL
#define VMCS_GUEST_GS		0x80aUL
#define VMCS_GUEST_LDTR		0x80cUL
#define VMCS_GUEST_TR		0x80eUL
#define VMCS_GUEST_INT_STATUS	0x810UL
#define VMCS_GUEST_PML_INDEX	0x812UL

#define VMCS_HOST_ES	0xc00UL
#define VMCS_HOST_CS	0xc02UL
#define VMCS_HOST_SS	0xc04UL
#define VMCS_HOST_DS	0xc06UL
#define VMCS_HOST_FS	0xc08UL
#define VMCS_HOST_GS	0xc0aUL
#define VMCS_HOST_TR	0xc0cUL

#define VMCS_IO_BITMAP_A_ADDR		0x2000UL
#define VMCS_IO_BITMAP_B_ADDR		0x2002UL
#define VMCS_MSR_BITMAP_ADDR		0x2004UL
#define VMCS_VMEXIT_MSR_STORE_ADDR	0x2006UL
#define VMCS_VMEXIT_MSR_LOAD_ADDR	0x2008UL
#define VMCS_VMENTRY_MSR_LOAD_ADDR	0x200aUL
#define VMCS_EXECUTIVE_VMCS_PTR		0x200cUL
#define VMCS_PML_ADDR			0x200eUL
#define VMCS_TSC_OFFS			0x2010UL
#define VMCS_VAPIC_ADDR			0x2012UL
#define VMCS_APIC_ACCESS_ADDR		0x2014UL
#define VMCS_POSTED_INT_DESC_ADDR	0x2016UL
#define VMCS_VMFUNC_CTLS		0x2018UL
#define VMCS_EPT_PTR			0x201aUL
#define VMCS_EOI_EXIT_BITMAP0		0x201cUL
#define VMCS_EOI_EXIT_BITMAP1		0x201eUL
#define VMCS_EOI_EXIT_BITMAP2		0x2020UL
#define VMCS_EOI_EXIT_BITMAP3		0x2022UL
#define VMCS_EPTP_LIST_ADDR		0x2024UL
#define VMCS_VMREAD_BITMAP_ADDR		0x2026UL
#define VMCS_VMWRITE_BITMAP_ADDR	0x2028UL
#define VMCS_VIRT_EXCEPTION_INFO_ADDR	0x202aUL
#define VMCS_XSS_EXIT_BITMAP		0x202cUL
#define VMCS_ENCLS_EXIT_BITMAP		0x202eUL
#define VMCS_TSC_MUL			0x2032UL

#define VMCS_GUEST_PHYS_ADDR			0x2400UL
#define VMCS_LINK_PTR				0x2800UL
#define VMCS_GUEST_IA32_DEBUGCTL		0x2800UL
#define VMCS_GUEST_IA32_PAT			0x2804UL
#define VMCS_GUEST_EFER				0x2806UL
#define VMCS_GUEST_IA32_PERF_GLOBAL_CTRL	0x2808UL
#define VMCS_GUEST_PDPTE0			0x280aUL
#define VMCS_GUEST_PDPTE1			0x280cUL
#define VMCS_GUEST_PDPTE2			0x280eUL
#define VMCS_GUEST_PDPTE3			0x2810UL
#define VMCS_GUEST_IA32_BNDCFGS			0x2812UL

#define VMCS_HOST_IA32_PAT			0x2c00UL
#define VMCS_HOST_IA32_EFER			0x2c02UL
#define VMCS_HOST_IA32_PERF_GLOBAL_CTRL		0x2c04UL

#define VMCS_PINBASED_CTLS		0x4000UL
#define VMCS_PROCBASED_CTLS		0x4002UL
#define VMCS_EXCEPTION_BITMAP		0x4004UL
#define VMCS_PAGE_FAULT_MASK		0x4006UL
#define VMCS_PAGE_FAULT_MATCH		0x4008UL
#define VMCS_CR3_TARGET_COUNT		0x400aUL
#define VMCS_VMEXIT_CTLS		0x400cUL
#define VMCS_VMEXIT_MSR_STORE_COUNT	0x400eUL
#define VMCS_VMEXIT_MSR_LOAD_COUNT	0x4010UL
#define VMCS_VMENTRY_CTLS		0x4012UL
#define VMCS_VMENTRY_MSR_LOAD_COUNT	0x4014UL
#define VMCS_VMENTRY_INT_INFO		0x4016UL
#define VMCS_VMENTRY_EXCEPTION_CODE	0x4018UL
#define VMCS_VMENTRY_INST_LENGTH	0x401aUL
#define VMCS_TPR_THRESHOLD		0x401cUL
#define VMCS_PROCBASED_CTLS2		0x401eUL
#define VMCS_PLE_GAP			0x4020UL
#define VMCS_PLE_WINDOW			0x4022UL

#define VMCS_VM_INSTR_ERROR	0x4400UL
#define VMCS_EXIT_REASON	0x4402UL
#define VMCS_VMEXIT_INT_INFO	0x4404UL
#define VMCS_VMEXIT_INT_ERROR	0x4406UL
#define VMCS_IDT_INFO		0x4408UL
#define VMCS_IDT_ERROR		0x440aUL
#define VMCS_VMEXIT_INST_LENGTH	0x440cUL
#define VNCS_VNEXIT_INST_INFO	0x440eUL

#define VMCS_GUEST_ES_LIMIT		0x4800UL
#define VMCS_GUEST_CS_LIMIT		0x4802UL
#define VMCS_GUEST_SS_LIMIT		0x4804UL
#define VMCS_GUEST_DS_LIMIT		0x4806UL
#define VMCS_GUEST_FS_LIMIT		0x4808UL
#define VMCS_GUEST_GS_LIMIT		0x480aUL
#define VMCS_GUEST_LDTR_LIMIT		0x480cUL
#define VMCS_GUEST_TR_LIMIT		0x480eUL
#define VMCS_GUEST_GDTR_LIMIT		0x4810UL
#define VMCS_GUEST_IDTR_LIMIT		0x4812UL
#define VMCS_GUEST_ES_ACCESS		0x4814UL
#define VMCS_GUEST_CS_ACCESS		0x4816UL
#define VMCS_GUEST_SS_ACCESS		0x4818UL
#define VMCS_GUEST_DS_ACCESS		0x481aUL
#define VMCS_GUEST_FS_ACCESS		0x481cUL
#define VMCS_GUEST_GS_ACCESS		0x481eUL
#define VMCS_GUEST_LDTR_ACCESS		0x4820UL
#define VMCS_GUEST_TR_ACCESS		0x4822UL
#define VMCS_GUEST_INT_STATE		0x4824UL
#define VMCS_GUEST_ACTIVE_STATE		0x4826UL
#define VMCS_GUEST_SMBASE		0x4828UL
#define VMCS_GUEST_IA32_SYSENTER_CS	0x482aUL
#define VMCS_VMX_PREEMT_TIMER_VALUE	0x482eUL

#define VMCS_HOST_IA32_SYSENTER_CS	0x4c00UL

#define VMCS_CR0_MASK		0x6000UL
#define VMCS_CR4_MASK		0x6002UL
#define VMCS_CR0_SHADOW		0x6004UL
#define VMCS_CR4_SHADOW		0x6006UL
#define VMCS_CR3_TARGET0	0x6008UL
#define VMCS_CR3_TARGET1	0x600aUL
#define VMCS_CR3_TARGET2	0x600cUL
#define VMCS_CR3_TARGET3	0x600eUL

#define VMCS_EXIT_QUALIFICATION	0x6400UL
#define VMCS_IO_RCX		0x6402UL
#define VMCS_IO_RSI		0x6404UL
#define VMCS_IO_RDI		0x6406UL
#define VMCS_IO_RIP		0x6408UL
#define VMCS_GUEST_LINEAR_ADDR	0x640aUL

#define VMCS_GUEST_CR0				0x6800UL
#define VMCS_GUEST_CR3				0x6802UL
#define VMCS_GUEST_CR4				0x6804UL
#define VMCS_GUEST_ES_BASE			0x6806UL
#define VMCS_GUEST_CS_BASE			0x6808UL
#define VMCS_GUEST_SS_BASE			0x680aUL
#define VMCS_GUEST_DS_BASE			0x680cUL
#define VMCS_GUEST_FS_BASE			0x680eUL
#define VMCS_GUEST_GS_BASE			0x6810UL
#define VMCS_GUEST_LDTR_BASE			0x6812UL
#define VMCS_GUEST_TR_BASE			0x6814UL
#define VMCS_GUEST_GDTR_BASE			0x6816UL
#define VMCS_GUEST_IDTR_BASE			0x6818UL
#define VMCS_GUEST_DR7				0x681aUL
#define VMCS_GUEST_RSP				0x681cUL
#define VMCS_GUEST_RIP				0x681eUL
#define VMCS_GUEST_RFLAGS			0x6820UL
#define VMCS_GUEST_PENDING_DEBUG_EXCEPTIONS	0x6820UL
#define VMCS_GUEST_IA32_SYSENTER_ESP		0x6824UL
#define VMCS_GUEST_IA32_SYSENTER_RIP		0x6826UL

#define VMCS_HOST_CR0			0x6c00UL
#define VMCS_HOST_CR3			0x6c02UL
#define VMCS_HOST_CR4			0x6c04UL
#define VMCS_HOST_FS_BASE		0x6c06UL
#define VMCS_HOST_GS_BASE		0x6c08UL
#define VMCS_HOST_TR_BASE		0x6c0aUL
#define VMCS_HOST_GDTR_BASE		0x6c0cUL
#define VMCS_HOST_IDTR_BASE		0x6c0eUL
#define VMCS_HOST_IA32_SYSENTER_ESP	0x6c10UL
#define VMCS_HOST_IA32_SYSENTER_EIP	0x6c12UL
#define VMCS_HOST_RSP			0x6c14UL
#define VMCS_HOST_RIP			0x6c16UL

struct vmx_registers
{
	uint16_t es;
	uint16_t cs;
	uint16_t ds;
	uint16_t ss;
	uint16_t gs;
	uint16_t fs;
	uint16_t tr;

	uint64_t cr0;
	uint64_t cr3;
	uint64_t cr4;
	uint64_t rsp;
	uint64_t rip;
	uint64_t es_base;
	uint64_t cs_base;
	uint64_t ds_base;
	uint64_t ss_base;
	uint64_t fs_base;
	uint64_t gs_base;
	uint64_t tr_base;
	uint64_t gdtr_base;
	uint64_t idtr_base;
	uint64_t rflags;
};

struct vmx_host_guest_context
{
	struct vmx_registers guest, host;
};

struct vmx_context
{
	void *vmxon_region;
	uintptr_t *ept;
};

#endif
